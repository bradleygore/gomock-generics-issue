// Code generated by MockGen. DO NOT EDIT.
// Source: gomock-generics-issue/workers (interfaces: PrimitiveWorker)

// Package mock_iface is a generated GoMock package.
package mock_iface

import (
	iface "gomock-generics-issue/iface"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrimitiveWorker is a mock of PrimitiveWorker interface.
type MockPrimitiveWorker struct {
	ctrl     *gomock.Controller
	recorder *MockPrimitiveWorkerMockRecorder
}

// MockPrimitiveWorkerMockRecorder is the mock recorder for MockPrimitiveWorker.
type MockPrimitiveWorkerMockRecorder struct {
	mock *MockPrimitiveWorker
}

// NewMockPrimitiveWorker creates a new mock instance.
func NewMockPrimitiveWorker(ctrl *gomock.Controller) *MockPrimitiveWorker {
	mock := &MockPrimitiveWorker{ctrl: ctrl}
	mock.recorder = &MockPrimitiveWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrimitiveWorker) EXPECT() *MockPrimitiveWorkerMockRecorder {
	return m.recorder
}

// BePrimitive mocks base method.
func (m *MockPrimitiveWorker) BePrimitive() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BePrimitive")
}

// BePrimitive indicates an expected call of BePrimitive.
func (mr *MockPrimitiveWorkerMockRecorder) BePrimitive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BePrimitive", reflect.TypeOf((*MockPrimitiveWorker)(nil).BePrimitive))
}

// DoWork mocks base method.
func (m *MockPrimitiveWorker) DoWork(arg0 ...interface{}) iface.WorkResult[int] {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoWork", varargs...)
	ret0, _ := ret[0].(iface.WorkResult[int])
	return ret0
}

// DoWork indicates an expected call of DoWork.
func (mr *MockPrimitiveWorkerMockRecorder) DoWork(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWork", reflect.TypeOf((*MockPrimitiveWorker)(nil).DoWork), arg0...)
}
