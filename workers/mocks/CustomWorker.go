// Code generated by MockGen. DO NOT EDIT.
// Source: gomock-generics-issue/workers (interfaces: CustomWorker)

// Package mock_iface is a generated GoMock package.
package mock_iface

import (
	iface "gomock-generics-issue/iface"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomWorker is a mock of CustomWorker interface.
type MockCustomWorker struct {
	ctrl     *gomock.Controller
	recorder *MockCustomWorkerMockRecorder
}

// MockCustomWorkerMockRecorder is the mock recorder for MockCustomWorker.
type MockCustomWorkerMockRecorder struct {
	mock *MockCustomWorker
}

// NewMockCustomWorker creates a new mock instance.
func NewMockCustomWorker(ctrl *gomock.Controller) *MockCustomWorker {
	mock := &MockCustomWorker{ctrl: ctrl}
	mock.recorder = &MockCustomWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomWorker) EXPECT() *MockCustomWorkerMockRecorder {
	return m.recorder
}

// DoWork mocks base method.
func (m *MockCustomWorker) DoWork(arg0 ...interface{}) iface.WorkResult[iface.CustomWorkDetail] {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoWork", varargs...)
	ret0, _ := ret[0].(iface.WorkResult[iface.CustomWorkDetail])
	return ret0
}

// DoWork indicates an expected call of DoWork.
func (mr *MockCustomWorkerMockRecorder) DoWork(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWork", reflect.TypeOf((*MockCustomWorker)(nil).DoWork), arg0...)
}

// HaveGoodTimes mocks base method.
func (m *MockCustomWorker) HaveGoodTimes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HaveGoodTimes")
}

// HaveGoodTimes indicates an expected call of HaveGoodTimes.
func (mr *MockCustomWorkerMockRecorder) HaveGoodTimes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaveGoodTimes", reflect.TypeOf((*MockCustomWorker)(nil).HaveGoodTimes))
}
